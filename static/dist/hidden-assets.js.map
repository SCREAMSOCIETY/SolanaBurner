{"version":3,"file":"hidden-assets.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA,cAAc;AACd,qCAAqC,SAAS;AAC9C;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,E","sources":["webpack://workspace/./static/js/hidden-assets.js"],"sourcesContent":["/**\n * Hidden Assets - Client-side storage for hiding assets in the UI\n * \n * This module provides functionality to \"hide\" assets from the UI\n * without actually transferring or burning them on-chain.\n * It's also used to hide successfully transferred cNFTs that might\n * still appear in API results due to caching.\n */\n\n// Initialize hidden assets storage\nconst LOCAL_STORAGE_KEY = 'solburn_hidden_assets';\n\n// Export as window object for easy access\nwindow.HiddenAssets = {\n    /**\n     * Hide an asset from the UI\n     * @param {string} assetId - The asset ID to hide\n     * @param {string} assetName - The asset name (for display)\n     * @param {string} assetType - The asset type (for filtering)\n     */\n    hideAsset: function(assetId, assetName, assetType) {\n        try {\n            // Get existing hidden assets\n            const hiddenAssets = this.getHiddenAssets();\n            \n            // Add the new asset\n            hiddenAssets[assetId] = {\n                id: assetId,\n                name: assetName || 'Unknown Asset',\n                type: assetType || 'cNFT',\n                dateHidden: new Date().toISOString()\n            };\n            \n            // Save back to local storage\n            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(hiddenAssets));\n            \n            console.log(`Asset ${assetId} hidden successfully`);\n            return true;\n        } catch (error) {\n            console.error('Error hiding asset:', error);\n            return false;\n        }\n    },\n    \n    /**\n     * Add an asset to the hidden assets list (alias for hideAsset)\n     * @param {string} assetId - The asset ID to add\n     */\n    addToHiddenAssets: function(assetId) {\n        return this.hideAsset(assetId, \"Transferred Asset\", \"cNFT\");\n    },\n    \n    /**\n     * Add multiple assets to the hidden assets list at once\n     * @param {string[]} assetIds - Array of asset IDs to add to hidden assets\n     */\n    addMultipleToHiddenAssets: function(assetIds) {\n        if (!Array.isArray(assetIds) || assetIds.length === 0) {\n            return false;\n        }\n        \n        try {\n            // Get existing hidden assets\n            const hiddenAssets = this.getHiddenAssets();\n            const now = new Date().toISOString();\n            \n            // Add each asset to the list\n            assetIds.forEach(assetId => {\n                hiddenAssets[assetId] = {\n                    id: assetId,\n                    name: \"Transferred Asset\",\n                    type: \"cNFT\",\n                    dateHidden: now\n                };\n            });\n            \n            // Save back to local storage\n            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(hiddenAssets));\n            \n            console.log(`Added ${assetIds.length} assets to hidden assets list`);\n            return true;\n        } catch (error) {\n            console.error('Error adding multiple assets to hidden list:', error);\n            return false;\n        }\n    },\n    \n    /**\n     * Unhide a previously hidden asset\n     * @param {string} assetId - The asset ID to unhide\n     */\n    unhideAsset: function(assetId) {\n        try {\n            // Get existing hidden assets\n            const hiddenAssets = this.getHiddenAssets();\n            \n            // Remove the asset if it exists\n            if (hiddenAssets[assetId]) {\n                delete hiddenAssets[assetId];\n                \n                // Save back to local storage\n                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(hiddenAssets));\n                console.log(`Asset ${assetId} unhidden successfully`);\n                return true;\n            } else {\n                console.log(`Asset ${assetId} was not hidden`);\n                return false;\n            }\n        } catch (error) {\n            console.error('Error unhiding asset:', error);\n            return false;\n        }\n    },\n    \n    /**\n     * Check if an asset is hidden\n     * @param {string} assetId - The asset ID to check\n     * @returns {boolean} - Whether the asset is hidden\n     */\n    isAssetHidden: function(assetId) {\n        try {\n            const hiddenAssets = this.getHiddenAssets();\n            return !!hiddenAssets[assetId];\n        } catch (error) {\n            console.error('Error checking if asset is hidden:', error);\n            return false;\n        }\n    },\n    \n    /**\n     * Get all hidden assets\n     * @returns {Object} - Map of asset IDs to asset info\n     */\n    getHiddenAssets: function() {\n        try {\n            const storedData = localStorage.getItem(LOCAL_STORAGE_KEY);\n            return storedData ? JSON.parse(storedData) : {};\n        } catch (error) {\n            console.error('Error getting hidden assets:', error);\n            return {};\n        }\n    },\n    \n    /**\n     * Get count of hidden assets\n     * @returns {number} - Count of hidden assets\n     */\n    getHiddenAssetsCount: function() {\n        try {\n            const hiddenAssets = this.getHiddenAssets();\n            return Object.keys(hiddenAssets).length;\n        } catch (error) {\n            console.error('Error getting hidden assets count:', error);\n            return 0;\n        }\n    },\n    \n    /**\n     * Clear all hidden assets\n     */\n    clearHiddenAssets: function() {\n        try {\n            localStorage.removeItem(LOCAL_STORAGE_KEY);\n            console.log('All hidden assets cleared');\n            return true;\n        } catch (error) {\n            console.error('Error clearing hidden assets:', error);\n            return false;\n        }\n    }\n};"],"names":[],"sourceRoot":""}