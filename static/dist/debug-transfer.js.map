{"version":3,"file":"debug-transfer.js","mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD,QAAQ;AACR;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA,yCAAyC,QAAQ;AACjD,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA,uDAAuD,iBAAiB,UAAU,iBAAiB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ,2CAA2C;AACnD,QAAQ,uDAAuD;AAC/D,QAAQ,+CAA+C;AACvD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,wBAAwB,UAAU;AAClC,iCAAiC;AACjC;AACA,QAAQ;AACR,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM,mBAAmB,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD,QAAQ;AACR;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK,0BAA0B,8FAA8F;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA,MAAM;AACN,oBAAoB,KAAK;AACzB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mGAAmG;AAC3G,QAAQ,2FAA2F;AACnG,QAAQ,2EAA2E;AACnF,QAAQ,uGAAuG;AAC/G,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS,QAAQ,sBAAsB;AACxF;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","sources":["webpack://workspace/./static/js/debug-transfer.js"],"sourcesContent":["/**\n * Debug Helpers for cNFT Transfers\n * This provides debug functions that can be called from the console\n */\n\n(function() {\n  // Debug info storage\n  window.debugTransfer = {\n    errors: [],\n    attempts: [],\n    logs: [],\n    buttons: [],\n    proofData: null,\n    assetData: null\n  };\n  \n  // Log wrapper that also adds to our debug logs\n  function debugLog(message, data) {\n    const logEntry = { \n      time: new Date().toISOString(),\n      message: message,\n      data: data\n    };\n    console.log(`[Debug] ${message}`, data);\n    window.debugTransfer.logs.push(logEntry);\n    return logEntry;\n  }\n  \n  // Error handler\n  function debugError(stage, error) {\n    const errorEntry = {\n      time: new Date().toISOString(),\n      stage: stage,\n      message: error.message,\n      stack: error.stack,\n      error: error\n    };\n    console.error(`[Debug] Error in ${stage}:`, error);\n    window.debugTransfer.errors.push(errorEntry);\n    return errorEntry;\n  }\n  \n  // Get wallet info\n  function getWallet() {\n    if (!window.solana || !window.solana.isConnected) {\n      throw new Error(\"Wallet not connected\");\n    }\n    \n    return {\n      publicKey: window.solana.publicKey,\n      signTransaction: (tx) => window.solana.signTransaction(tx)\n    };\n  }\n  \n  // Function to test all our transfer implementations\n  window.testTransferImplementations = async function(assetId) {\n    debugLog(\"Starting transfer implementation tests\", { assetId });\n    \n    if (!assetId) {\n      // Find the first available cNFT from the UI\n      const buttons = document.querySelectorAll('.trash-button[data-asset-id], .burn-button[data-asset-id]');\n      if (buttons.length > 0) {\n        assetId = buttons[0].getAttribute('data-asset-id');\n        debugLog(\"Found assetId from UI\", { assetId });\n      } else {\n        const error = new Error(\"No asset ID provided and none found in UI\");\n        debugError(\"setup\", error);\n        return { success: false, error: error.message };\n      }\n    }\n    \n    // Collect button information\n    const buttons = document.querySelectorAll('.trash-button, .burn-button, [data-action=\"trash\"], [data-action=\"burn-cnft\"]');\n    debugLog(`Found ${buttons.length} buttons to analyze`);\n    \n    Array.from(buttons).forEach((button, index) => {\n      const buttonData = {\n        index,\n        classList: Array.from(button.classList),\n        assetId: button.getAttribute('data-asset-id'),\n        action: button.getAttribute('data-action'),\n        hasClickHandler: !!button.onclick,\n        html: button.outerHTML\n      };\n      window.debugTransfer.buttons.push(buttonData);\n    });\n    \n    // Fetch asset and proof data\n    try {\n      debugLog(\"Fetching proof and asset data\", { assetId });\n      \n      const [proofResp, assetResp] = await Promise.all([\n        fetch(`/api/helius/asset-proof/${assetId}`),\n        fetch(`/api/helius/asset/${assetId}`)\n      ]);\n      \n      if (!proofResp.ok || !assetResp.ok) {\n        throw new Error(`Failed to fetch data: proof=${proofResp.status}, asset=${assetResp.status}`);\n      }\n      \n      const proofData = await proofResp.json();\n      const assetData = await assetResp.json();\n      \n      if (!proofData.success || !assetData.success) {\n        throw new Error(\"Invalid data received from server\");\n      }\n      \n      window.debugTransfer.proofData = proofData.data;\n      window.debugTransfer.assetData = assetData.data;\n      \n      debugLog(\"Successfully fetched proof and asset data\", { \n        proofSize: proofData.data.proof.length,\n        assetName: assetData.data.name\n      });\n    } catch (error) {\n      debugError(\"data-fetch\", error);\n      return { success: false, error: error.message };\n    }\n    \n    // Now try the different implementations\n    const implementations = [\n      { name: \"solo\", fn: window.soloTransferCNFT },\n      { name: \"standalone\", fn: window.standaloneTransferCNFT },\n      { name: \"direct\", fn: window.directTransferCNFT },\n      { name: \"server-side\", fn: window.serverSideTransferCNFT }\n    ];\n    \n    // Test any available implementation\n    const results = {};\n    \n    for (const impl of implementations) {\n      if (typeof impl.fn === 'function') {\n        debugLog(`Testing ${impl.name} implementation`);\n        try {\n          const attempt = {\n            name: impl.name,\n            time: new Date().toISOString(),\n            status: 'started'\n          };\n          window.debugTransfer.attempts.push(attempt);\n          \n          // Run the implementation\n          const result = await impl.fn(assetId);\n          \n          // Update attempt status\n          attempt.status = result.success ? 'success' : 'failed';\n          attempt.result = result;\n          \n          results[impl.name] = result;\n          debugLog(`${impl.name} implementation result:`, result);\n          \n          if (result.success) {\n            // We found a working implementation!\n            return {\n              success: true,\n              message: `Successfully transferred using ${impl.name} implementation`,\n              implementation: impl.name,\n              signature: result.signature,\n              explorerUrl: result.explorerUrl\n            };\n          }\n        } catch (error) {\n          debugError(`${impl.name}-implementation`, error);\n          results[impl.name] = { success: false, error: error.message };\n        }\n      } else {\n        debugLog(`${impl.name} implementation not available`);\n      }\n    }\n    \n    // If we get here, none of the implementations worked\n    return {\n      success: false,\n      message: \"All implementations failed\",\n      results\n    };\n  };\n  \n  // Expose a direct function to manually try a specific implementation\n  window.tryTransferImplementation = async function(name, assetId) {\n    debugLog(`Manually trying ${name} implementation`, { assetId });\n    \n    if (!assetId) {\n      // Find the first available cNFT from the UI\n      const buttons = document.querySelectorAll('.trash-button[data-asset-id], .burn-button[data-asset-id]');\n      if (buttons.length > 0) {\n        assetId = buttons[0].getAttribute('data-asset-id');\n        debugLog(\"Found assetId from UI\", { assetId });\n      } else {\n        const error = new Error(\"No asset ID provided and none found in UI\");\n        debugError(\"setup\", error);\n        return { success: false, error: error.message };\n      }\n    }\n    \n    // Map of implementation names to functions\n    const implementations = {\n      solo: window.soloTransferCNFT,\n      standalone: window.standaloneTransferCNFT,\n      direct: window.directTransferCNFT,\n      serverSide: window.serverSideTransferCNFT\n    };\n    \n    const fn = implementations[name];\n    if (typeof fn !== 'function') {\n      return { \n        success: false, \n        error: `Implementation '${name}' not found. Available: ${Object.keys(implementations).filter(k => typeof implementations[k] === 'function').join(', ')}`\n      };\n    }\n    \n    // Try the selected implementation\n    try {\n      const attempt = {\n        name,\n        time: new Date().toISOString(),\n        status: 'started'\n      };\n      window.debugTransfer.attempts.push(attempt);\n      \n      // Run the implementation\n      const result = await fn(assetId);\n      \n      // Update attempt status\n      attempt.status = result.success ? 'success' : 'failed';\n      attempt.result = result;\n      \n      debugLog(`${name} implementation result:`, result);\n      return result;\n    } catch (error) {\n      debugError(`${name}-implementation`, error);\n      return { success: false, error: error.message };\n    }\n  };\n  \n  // Function to get TransactionInstruction class if available\n  window.getTransactionInstructionClass = function() {\n    const locations = [\n      { path: \"window.solanaWeb3?.TransactionInstruction\", obj: window.solanaWeb3?.TransactionInstruction },\n      { path: \"window.solana?.TransactionInstruction\", obj: window.solana?.TransactionInstruction },\n      { path: \"window.TransactionInstruction\", obj: window.TransactionInstruction },\n      { path: \"window.solana?.Web3?.TransactionInstruction\", obj: window.solana?.Web3?.TransactionInstruction },\n      { path: \"window.SolanaWeb3JS?.TransactionInstruction\", obj: window.SolanaWeb3JS?.TransactionInstruction }\n    ];\n    \n    const found = locations.filter(loc => loc.obj !== undefined);\n    return {\n      found: found.length > 0,\n      locations: found.map(f => f.path),\n      constructors: found.map(f => f.obj)\n    };\n  };\n  \n  // Function to get information about global objects\n  window.getGlobalObjectInfo = function() {\n    const globalObjects = [\n      \"solana\", \"solanaWeb3\", \"Transaction\", \"TransactionInstruction\", \"PublicKey\",\n      \"SolanaWeb3JS\", \"bubblegumTransfer\", \"soloTransferCNFT\", \"standaloneTransferCNFT\",\n      \"directTransferCNFT\", \"serverSideTransferCNFT\"\n    ];\n    \n    const result = {};\n    for (const objName of globalObjects) {\n      const obj = window[objName];\n      result[objName] = {\n        exists: obj !== undefined,\n        type: obj ? typeof obj : 'undefined',\n        isFunction: typeof obj === 'function',\n        properties: obj ? Object.keys(obj) : []\n      };\n    }\n    \n    return result;\n  };\n  \n  // This allows manual patching of buttons at any time\n  window.manuallyPatchButtons = function() {\n    debugLog(\"Manually patching buttons\");\n    \n    // Find all trash/burn buttons for cNFTs\n    const buttons = document.querySelectorAll('.trash-button, .burn-button, [data-action=\"trash\"], [data-action=\"burn-cnft\"]');\n    debugLog(`Found ${buttons.length} buttons to patch`);\n    \n    Array.from(buttons).forEach((button, index) => {\n      // Save info about the button\n      const buttonData = {\n        index,\n        classList: Array.from(button.classList),\n        assetId: button.getAttribute('data-asset-id'),\n        action: button.getAttribute('data-action'),\n        hasClickHandler: !!button.onclick,\n        html: button.outerHTML\n      };\n      window.debugTransfer.buttons.push(buttonData);\n      \n      // Save the original click handler\n      const originalClick = button.onclick;\n      \n      // Replace with our debug handler\n      button.onclick = async function(event) {\n        const assetId = button.getAttribute('data-asset-id');\n        if (assetId && button.classList.contains('cnft')) {\n          // Stop the default behavior\n          event.preventDefault();\n          event.stopPropagation();\n          \n          debugLog(`[Manual] Intercepted click for cNFT ${assetId}`);\n          \n          // Show processing notification\n          if (window.BurnAnimations?.showNotification) {\n            window.BurnAnimations.showNotification(\n              \"Debug Transfer\",\n              \"Testing implementations...\"\n            );\n          }\n          \n          // Test all implementations\n          const result = await window.testTransferImplementations(assetId);\n          \n          if (result.success) {\n            debugLog(`Successfully transferred ${assetId} using ${result.implementation}`);\n            \n            // Show achievement notification\n            if (window.BurnAnimations?.showAchievement) {\n              window.BurnAnimations.showAchievement(\n                \"Debug Transfer Success\",\n                `Implementation: ${result.implementation}`\n              );\n            }\n            \n            // Add to hidden assets\n            if (window.hiddenAssets) {\n              window.hiddenAssets.addHiddenAsset(assetId);\n            }\n          } else {\n            debugLog(`Failed to transfer ${assetId}`, result);\n            \n            // Show error notification\n            if (window.BurnAnimations?.showNotification) {\n              window.BurnAnimations.showNotification(\n                \"Debug Transfer Failed\",\n                `Error: ${result.message}`\n              );\n            }\n          }\n          \n          return false;\n        } else if (originalClick) {\n          // Not a cNFT button, use original handler\n          return originalClick.call(this, event);\n        }\n      };\n    });\n    \n    debugLog(`Successfully patched ${buttons.length} buttons`);\n    return buttons.length;\n  };\n  \n  // Initialize immediately\n  console.log(\"[Debug] Transfer debug tools initialized. Available commands:\");\n  console.log(\"- window.testTransferImplementations(assetId) - Test all implementations\");\n  console.log(\"- window.tryTransferImplementation(name, assetId) - Test a specific implementation\");\n  console.log(\"- window.manuallyPatchButtons() - Patch all buttons with debug handler\");\n  console.log(\"- window.getTransactionInstructionClass() - Check for TransactionInstruction\");\n  console.log(\"- window.getGlobalObjectInfo() - Get info about global objects\");\n  console.log(\"Debug data is stored in window.debugTransfer\");\n})();"],"names":[],"sourceRoot":""}