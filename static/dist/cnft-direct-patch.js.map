{"version":3,"file":"cnft-direct-patch.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,QAAQ;AAC7E;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH,CAAC,E","sources":["webpack://workspace/./static/js/cnft-direct-patch.js"],"sourcesContent":["/**\n * Direct Patch for CNFTHandler\n * \n * This script directly patches the CNFTHandler prototype to override the \n * transferCNFTWithProof method with a working implementation.\n */\n\n// Execute when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('[CNFT-Direct-Patch] Initializing...');\n  \n  // Wait for all scripts to load before applying patch\n  window.addEventListener('load', () => {\n    console.log('[CNFT-Direct-Patch] Window loaded, applying patch...');\n    \n    // Direct patch function\n    function applyTransferPatch() {\n      // Check if we have both the CNFTHandler and our implementation available\n      if (!window.CNFTHandler) {\n        console.error('[CNFT-Direct-Patch] CNFTHandler not found, cannot apply patch');\n        return;\n      }\n      \n      if (!window.fixedBubblegumTransfer) {\n        console.error('[CNFT-Direct-Patch] fixedBubblegumTransfer not found, cannot apply patch');\n        return;\n      }\n      \n      console.log('[CNFT-Direct-Patch] Found required components, applying patch');\n      \n      try {\n        // Create a reference to the old method we're going to override\n        const oldTransferMethod = window.CNFTHandler.prototype.transferCNFTWithProof;\n        \n        // Override the method with our fixed implementation\n        window.CNFTHandler.prototype.transferCNFTWithProof = async function(assetId, providedProofData, destinationAddress = null) {\n          console.log('[CNFT-Direct-Patch] Using patched transferCNFTWithProof');\n          \n          // Input validation remains the same\n          if (!assetId) {\n            return { success: false, error: \"Asset ID is required\" };\n          }\n          \n          if (!providedProofData) {\n            return { success: false, error: \"Proof data is required\" };\n          }\n          \n          try {\n            // Get asset data\n            let assetData;\n            try {\n              const assetResponse = await fetch(`/api/helius/asset/${assetId}`);\n              const assetResult = await assetResponse.json();\n              \n              if (assetResult.success && assetResult.data) {\n                assetData = assetResult.data;\n                console.log('[CNFT-Direct-Patch] Asset data fetched successfully');\n              } else {\n                throw new Error(\"Failed to fetch asset data\");\n              }\n            } catch (assetError) {\n              console.error('[CNFT-Direct-Patch] Error fetching asset data:', assetError);\n              throw new Error(\"Failed to get asset data\");\n            }\n            \n            // Use the project wallet if no destination specified\n            const finalDestination = destinationAddress || \"EYjsLzE9VDy3WBd2beeCHA1eVYJxPKVf6NoKKDwq7ujK\";\n            console.log('[CNFT-Direct-Patch] Destination wallet:', finalDestination);\n            \n            // Show a notification to the user\n            if (window.BurnAnimations?.showNotification) {\n              window.BurnAnimations.showNotification(\n                \"Processing cNFT Transfer\",\n                \"Creating transaction using fixed implementation...\"\n              );\n            }\n            \n            // Use our fixed implementation to do the transfer\n            console.log('[CNFT-Direct-Patch] Calling fixed implementation');\n            const result = await window.fixedBubblegumTransfer.transferCNFT({\n              connection: this.connection,\n              wallet: this.wallet,\n              assetId,\n              destinationAddress: finalDestination,\n              proofData: providedProofData,\n              assetData\n            });\n            \n            // Process result\n            if (result.success) {\n              console.log('[CNFT-Direct-Patch] Transfer successful!');\n              \n              // Add to hidden assets\n              if (window.hiddenAssets) {\n                window.hiddenAssets.addHiddenAsset(assetId);\n              }\n              \n              // Show achievement\n              if (window.BurnAnimations?.showAchievement) {\n                const assetName = assetData?.content?.metadata?.name || \"cNFT\";\n                window.BurnAnimations.showAchievement(\n                  \"cNFT Trashed\",\n                  `You've successfully trashed ${assetName} to the project collection.`\n                );\n              }\n              \n              // Track stats\n              if (window.checkAchievements) {\n                window.checkAchievements('cnft_trash', 1);\n              }\n              \n              // Return success result\n              return {\n                ...result,\n                assetId,\n                assetData\n              };\n            } else {\n              console.error('[CNFT-Direct-Patch] Transfer failed:', result.error);\n              \n              // Show error notification\n              if (window.BurnAnimations?.showNotification) {\n                window.BurnAnimations.showNotification(\n                  \"cNFT Trash Failed\",\n                  `Error: ${result.error}`\n                );\n              }\n              \n              return result;\n            }\n          } catch (error) {\n            console.error('[CNFT-Direct-Patch] Transfer error:', error);\n            \n            // Show error notification\n            if (window.BurnAnimations?.showNotification) {\n              window.BurnAnimations.showNotification(\n                \"cNFT Trash Failed\",\n                `Error: ${error.message}`\n              );\n            }\n            \n            // Fall back to original method as last resort\n            try {\n              console.log('[CNFT-Direct-Patch] Trying original implementation as fallback');\n              return await oldTransferMethod.call(this, assetId, providedProofData, destinationAddress);\n            } catch (fallbackError) {\n              console.error('[CNFT-Direct-Patch] Fallback also failed:', fallbackError);\n              return {\n                success: false,\n                error: error.message,\n                fallbackError: fallbackError.message\n              };\n            }\n          }\n        };\n        \n        console.log('[CNFT-Direct-Patch] Successfully patched CNFTHandler.transferCNFTWithProof');\n      } catch (error) {\n        console.error('[CNFT-Direct-Patch] Error applying patch:', error);\n      }\n    }\n    \n    // Try to apply patch immediately, or wait for CNFTHandler to be available\n    if (window.CNFTHandler) {\n      applyTransferPatch();\n    } else {\n      // If not found immediately, try again after a short delay \n      // (this can happen when scripts load in different orders)\n      console.log('[CNFT-Direct-Patch] CNFTHandler not found yet, will retry shortly');\n      setTimeout(() => {\n        if (window.CNFTHandler) {\n          applyTransferPatch();\n        } else {\n          console.error('[CNFT-Direct-Patch] CNFTHandler not available after timeout');\n        }\n      }, 1000);\n    }\n  });\n});"],"names":[],"sourceRoot":""}