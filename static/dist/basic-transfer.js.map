{"version":3,"file":"basic-transfer.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA,8CAA8C,QAAQ,MAAM,cAAc;AAC1E;AACA;AACA;AACA,YAAY,wCAAwC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU;AACtD;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,E","sources":["webpack://workspace/./static/js/basic-transfer.js"],"sourcesContent":["/**\n * Basic Transfer - A simplified cNFT transfer method for Solburnt\n * \n * This module provides a very basic token transfer without using any bubblegum SDK methods\n * It's intended as a last resort when other methods fail.\n */\n\n// Constants and configuration\nconst PROJECT_WALLET = \"EJNt9MPzVay5p9iDtSQMs6PGTUFYpX3rNA55y4wqi5P8\";\n\n// Simple SOL transfer function\nasync function basicTransfer(connection, wallet, destinationAddress, amount) {\n  try {\n    // Ensure wallet is connected\n    if (!wallet || !wallet.publicKey) {\n      throw new Error(\"Wallet not connected\");\n    }\n\n    // Set up transfer parameters\n    const target = destinationAddress || PROJECT_WALLET;\n    const amountToSend = amount || 1000; // 0.000001 SOL by default\n    \n    console.log(`Creating basic transfer to ${target} for ${amountToSend} lamports`);\n    \n    // Import needed web3 modules directly\n    const web3 = window.solanaWeb3;\n    const { SystemProgram, Transaction, PublicKey } = web3;\n    \n    // Create transfer instruction\n    const transferIx = SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: new PublicKey(target),\n      lamports: amountToSend\n    });\n    \n    // Create transaction\n    const tx = new Transaction();\n    const { blockhash } = await connection.getLatestBlockhash();\n    tx.recentBlockhash = blockhash;\n    tx.feePayer = wallet.publicKey;\n    tx.add(transferIx);\n    \n    // Sign and send transaction\n    const signedTx = await wallet.signTransaction(tx);\n    const signature = await connection.sendRawTransaction(signedTx.serialize());\n    \n    return {\n      success: true,\n      signature,\n      message: \"Basic transfer completed successfully\",\n      explorerUrl: `https://solscan.io/tx/${signature}`\n    };\n  } catch (error) {\n    console.error(\"Error in basicTransfer:\", error);\n    \n    return {\n      success: false,\n      error: error.message || \"Unknown error in basic transfer\"\n    };\n  }\n}\n\n// Export functions\nwindow.BasicTransfer = {\n  transfer: basicTransfer\n};"],"names":[],"sourceRoot":""}