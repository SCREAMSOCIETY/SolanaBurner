{"version":3,"file":"cnft-handler-patch.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,QAAQ;AAC7E;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH,CAAC,E","sources":["webpack://workspace/./static/js/cnft-handler-patch.js"],"sourcesContent":["/**\n * CNFT Handler Patch\n * \n * This script patches the CNFTHandler class with a fixed implementation for transferring cNFTs.\n * The original implementation in cnft-handler.js has issues with the Anchor instruction format\n * that cause \"InstructionFallbackNotFound\" errors. This patch replaces the problematic method\n * with a working implementation that uses the official Metaplex Bubblegum approach.\n */\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Wait for the page to fully load before patching\n  window.addEventListener('load', () => {\n    console.log('[CNFT Handler Patch] Initializing...');\n    \n    // Check if CNFTHandler and our fixed implementation are available\n    if (window.cnftHandler && window.cnftHandler.CNFTHandler && window.fixedBubblegumTransfer) {\n      console.log('[CNFT Handler Patch] CNFTHandler and fixedBubblegumTransfer found, applying patch');\n      \n      try {\n        // Save a reference to the original prototype\n        const originalPrototype = window.cnftHandler.CNFTHandler.prototype;\n        \n        // Save a reference to the original methods we want to preserve\n        const originalTransferCNFT = originalPrototype.transferCNFT;\n        const originalTransferCNFTWithProof = originalPrototype.transferCNFTWithProof;\n        \n        // Replace the transferCNFTWithProof method with our fixed implementation\n        originalPrototype.transferCNFTWithProof = async function(assetId, providedProofData, destinationAddress = null) {\n          console.log('[CNFT Handler Patch] Using patched transferCNFTWithProof method');\n          \n          if (!assetId) {\n            return {\n              success: false,\n              error: \"Asset ID is required\",\n            };\n          }\n          \n          if (!providedProofData) {\n            return {\n              success: false,\n              error: \"Proof data is required for transferCNFTWithProof method\",\n            };\n          }\n          \n          try {\n            // Get asset data - we still need this for metadata\n            let assetData = null;\n            try {\n              // Fetch asset data from API\n              const assetResponse = await fetch(`/api/helius/asset/${assetId}`);\n              const assetResult = await assetResponse.json();\n              \n              if (assetResult.success && assetResult.data) {\n                assetData = assetResult.data;\n                console.log(\"[CNFT Handler Patch] Successfully fetched asset data for cNFT\");\n              } else {\n                throw new Error(\"Failed to fetch asset data\");\n              }\n            } catch (assetError) {\n              console.error(\"[CNFT Handler Patch] Error fetching asset data:\", assetError);\n              throw new Error(\"Failed to get cNFT asset data. Cannot complete transfer\");\n            }\n            \n            // Validate the destination address\n            const finalDestination = destinationAddress || \"EYjsLzE9VDy3WBd2beeCHA1eVYJxPKVf6NoKKDwq7ujK\";\n            \n            console.log(\"[CNFT Handler Patch] Destination wallet:\", finalDestination);\n            console.log(\"[CNFT Handler Patch] Using fixed bubblegum transfer implementation\");\n            \n            // Show processing notification\n            if (typeof window !== \"undefined\" && window.BurnAnimations?.showNotification) {\n              window.BurnAnimations.showNotification(\n                \"Processing cNFT Transfer\", \n                \"Creating transfer transaction...\"\n              );\n            }\n            \n            // Use our fixed implementation\n            const result = await window.fixedBubblegumTransfer.transferCNFT({\n              connection: this.connection,\n              wallet: this.wallet,\n              assetId,\n              destinationAddress: finalDestination,\n              proofData: providedProofData,\n              assetData\n            });\n            \n            // Check if transfer was successful\n            if (result.success) {\n              console.log(\"[CNFT Handler Patch] cNFT transfer successful!\");\n              \n              // Add to hidden assets in localStorage\n              if (typeof window !== 'undefined' && window.hiddenAssets) {\n                window.hiddenAssets.addHiddenAsset(assetId);\n              }\n              \n              // Show achievement notification\n              if (typeof window !== 'undefined' && window.BurnAnimations?.showAchievement) {\n                const assetName = assetData?.content?.metadata?.name || \"cNFT\";\n                window.BurnAnimations.showAchievement(\n                  \"cNFT Trashed\", \n                  `You've successfully trashed ${assetName} to our collection.`\n                );\n              }\n              \n              // Send to burn success event to track stats\n              if (typeof window !== 'undefined' && window.checkAchievements) {\n                window.checkAchievements('cnft_trash', 1);\n              }\n              \n              return {\n                ...result,\n                assetId,\n                assetData\n              };\n            } else {\n              console.error(\"[CNFT Handler Patch] cNFT transfer failed:\", result.error);\n              \n              // Show error notification\n              if (typeof window !== 'undefined' && window.BurnAnimations?.showNotification) {\n                window.BurnAnimations.showNotification(\n                  \"cNFT Trash Failed\", \n                  `Error: ${result.error}`\n                );\n              }\n              \n              return result;\n            }\n          } catch (error) {\n            console.error(\"[CNFT Handler Patch] Error in transferCNFTWithProof:\", error);\n            \n            // Show error notification\n            if (typeof window !== 'undefined' && window.BurnAnimations?.showNotification) {\n              window.BurnAnimations.showNotification(\n                \"cNFT Trash Failed\", \n                `Error: ${error.message}`\n              );\n            }\n            \n            // Try to fall back to the original implementation as a last resort\n            console.log(\"[CNFT Handler Patch] Trying original implementation as fallback\");\n            try {\n              return await originalTransferCNFTWithProof.call(this, assetId, providedProofData, destinationAddress);\n            } catch (fallbackError) {\n              console.error(\"[CNFT Handler Patch] Fallback also failed:\", fallbackError);\n              return {\n                success: false,\n                error: error.message,\n                fallbackError: fallbackError.message\n              };\n            }\n          }\n        };\n        \n        console.log('[CNFT Handler Patch] Successfully patched CNFTHandler.transferCNFTWithProof');\n      } catch (error) {\n        console.error('[CNFT Handler Patch] Error patching CNFTHandler:', error);\n      }\n    } else {\n      console.error('[CNFT Handler Patch] CNFTHandler or fixedBubblegumTransfer not found');\n    }\n  });\n});"],"names":[],"sourceRoot":""}