{"version":3,"file":"improved-server-transfer.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAiE,kBAAkB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,gEAAgE,iBAAiB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC,E","sources":["webpack://workspace/./static/js/improved-server-transfer.js"],"sourcesContent":["/**\n * Improved Server Transfer for cNFTs\n * \n * This module provides an improved implementation for transferring cNFTs that avoids\n * the TransactionInstruction class dependency in the browser context.\n * \n * It uses a server-side approach where the transaction is created on the server,\n * and only signing is done in the browser. This avoids compatibility issues\n * and improves reliability.\n */\n\n// Self-invoking function to avoid polluting global namespace\n(function() {\n  // Make the transfer function available globally\n  window.ImprovedServerTransfer = {\n    transferCNFT\n  };\n\n  /**\n   * Transfer a cNFT to the project wallet using the improved server transfer approach\n   * @param {string} assetId - The asset ID of the cNFT to transfer\n   * @returns {Promise<object>} - Result of the transfer operation\n   */\n  async function transferCNFT(assetId) {\n    try {\n      console.log('[ImprovedServer] Starting improved server-side transfer for', assetId);\n      \n      // Get the wallet adapter\n      const wallet = window.solana;\n      \n      if (!wallet || !wallet.isConnected) {\n        throw new Error('Wallet not connected');\n      }\n      \n      // Get the owner address\n      const ownerAddress = wallet.publicKey.toString();\n      \n      // 1. Prepare the transaction on the server\n      console.log('[ImprovedServer] Preparing transaction on server');\n      const prepareResponse = await fetch('/api/server-transfer/prepare', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assetId,\n          ownerAddress\n        })\n      });\n      \n      const prepareData = await prepareResponse.json();\n      \n      if (!prepareData.success) {\n        throw new Error(`Server failed to prepare transaction: ${prepareData.error}`);\n      }\n      \n      console.log('[ImprovedServer] Transaction prepared successfully', prepareData);\n      \n      // 2. Sign the transaction using the wallet\n      console.log('[ImprovedServer] Requesting signature from wallet');\n      \n      // Convert base64 transaction to Uint8Array\n      const transaction = _base64ToUint8Array(prepareData.transaction);\n      \n      // Request signing\n      const signedTransaction = await wallet.signTransaction(transaction);\n      \n      // Wait for the prompt to be dismissed\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Convert the signed transaction to base64\n      const signedBase64 = _uint8ArrayToBase64(signedTransaction);\n      \n      console.log('[ImprovedServer] Transaction signed successfully');\n      \n      // 3. Submit the signed transaction to the server\n      console.log('[ImprovedServer] Submitting signed transaction to server');\n      const submitResponse = await fetch('/api/server-transfer/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          signedTransaction: signedBase64,\n          assetId\n        })\n      });\n      \n      const submitData = await submitResponse.json();\n      \n      if (!submitData.success) {\n        throw new Error(`Server failed to submit transaction: ${submitData.error}`);\n      }\n      \n      console.log('[ImprovedServer] Transaction submitted successfully', submitData);\n      \n      return {\n        success: true,\n        signature: submitData.signature,\n        assetId,\n        message: 'cNFT transferred successfully'\n      };\n    } catch (error) {\n      console.error('[ImprovedServer] Error in cNFT transfer:', error);\n      return {\n        success: false,\n        error: error.message,\n        assetId\n      };\n    }\n  }\n  \n  /**\n   * Convert base64 string to Uint8Array\n   * @param {string} base64 - Base64 encoded string\n   * @returns {Uint8Array} - Decoded Uint8Array\n   * @private\n   */\n  function _base64ToUint8Array(base64) {\n    const binaryString = window.atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n  }\n  \n  /**\n   * Convert Uint8Array to base64 string\n   * @param {Uint8Array} uint8Array - Uint8Array to convert\n   * @returns {string} - Base64 encoded string\n   * @private\n   */\n  function _uint8ArrayToBase64(uint8Array) {\n    let binary = '';\n    const len = uint8Array.length;\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(uint8Array[i]);\n    }\n    return window.btoa(binary);\n  }\n})();\n\n// Initialize the component when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n  console.log('[ImprovedServer] Improved server transfer component initialized');\n});"],"names":[],"sourceRoot":""}